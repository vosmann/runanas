package com.vosmann.runanas.data;

import java.util.LinkedList;
import java.util.List;

import android.location.Location;
import android.util.Log;

/**
 * A class encapsulating all important information about a run.
 * @author vosmann
 */
public class Run {
	private static final String TAG = "Run";
	private static final double BANANA_ENERGY = 440.0; // In [kJ]. Medium-size.
	
	private List<RunPoint> runPoints;
	private RunMetrics runMetrics;
	
	public Run(double mass) {
		this.runPoints = new LinkedList<RunPoint>();
		this.runMetrics = new RunMetrics(mass);
	}
	
	public void addRunPoint(Location newRunPointLocation) {
		if (newRunPointLocation == null) {
			Log.w(TAG, "addRunPoint(): Can't add a null runPointLocation!");
		}
		if (runPoints == null) {
			runPoints = new LinkedList<RunPoint>();
			Log.w(TAG,
					"addRunPoint(): runPoints list was null! Created new one.");
		}
		RunPoint lastRunPoint = runPoints.get(runPoints.size() - 1);
		RunPoint newRunPoint = new RunPoint(lastRunPoint, newRunPointLocation);
		runPoints.add(newRunPoint);
		if (this.runPoints.size() > 1) {
			Location firstRunPoint = runPoints.get(0);
			Location previousRunPoint = runPoints.get(runPoints.size() - 2);
			distance += runPoint.distanceTo(previousRunPoint);
			duration = runPoint.getTime() - firstRunPoint.getTime();
			averageSpeed = (distance / duration) * 3600.0f; // [km/h].
			calculateEnergyExpenditure();
		}
	}
	public void addRunPoints(List<Location> runPoints) {
		for(Location runPoint : runPoints) {
			addRunPoint(runPoint);
		}
	}
	
	private void calculateEnergyExpenditure() {
		// This is an rough approximation of the energy rate while
		// running 10km/h.
		final double kjPerKgPerSecond = 0.0129138;
		energyExpenditure = mass * (duration / 1000) * kjPerKgPerSecond;
		bananas = energyExpenditure / BANANA_ENERGY;
	}

	/**
	 * The ordered list of GPS coordinates gathered during the run along with
	 * some corresponding information.
	 */
	public List<Location> getRunPoints() {
		return runPoints;
	}
	/** The distance ran. Expressed in meters. */
	public double getDistance() {
		return distance;
	}
	/** Expressed in milliseconds. */
	public long getDuration() {
		return duration;
	}
	/** Expressed in kilometers per hour. */
	public double getAverageSpeed() {
		return averageSpeed;
	}
	/** Expressed in kilograms [kg]. */
	public double getMass() {
		return mass;
	}
	/** Expressed in joules [J]. */
	public double getEnergyExpenditure() {
		return energyExpenditure;
	}
	/** Energy expenditure expressed in bananas. */
	public double getBananas() {
		return bananas;
	}
	
	public String formatDistance() {
		return String.format("%.2f m", distance);
	}
	public String formatDuration() {
		long durationSecs = duration / 1000L;
		long durationMins = durationSecs / 60L;
		long durationHours = durationMins / 60L;
		return String.format("%d:%d:%d",
				durationHours, durationMins, durationSecs);
	}
	public String formatAverageSpeed() {
		return String.format("%.2 km/h", averageSpeed);
	}
	public String formatMass() {
		return String.format("%.1f", mass);
	}
	public String formatEnergyExpenditure() {
		return String.format("%.3f kJ", energyExpenditure);
	}
	public String formatBananas() {
		return String.format("%.1f", bananas);
	}
	public String formatLastRunPoint() {
		String formattedLastRunPoint = null;
		Location lastRunPoint = runPoints.get(runPoints.size());
		if (lastRunPoint != null) {
			formattedLastRunPoint = String.format("%.6f, %.6f",
					lastRunPoint.getLatitude(), lastRunPoint.getLongitude());
		} else {
			formattedLastRunPoint = "Last run point not available";
		}
		return formattedLastRunPoint;
	}
}
